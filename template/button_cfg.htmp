// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
* @file     button_cfg.h
* @brief    Button configurations
* @author   Ziga Miklosic
* @email    ziga.miklosic@gmail.com
* @date     08.11.2023
* @version	V1.2.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
* @addtogroup BUTTON_CFG
* @{ <!-- BEGIN GROUP -->
*
*
* 	Configuration for Button
*
* 	User shall put code inside inside code block start with
* 	"USER_CODE_BEGIN" and with end of "USER_CODE_END".
*
*/
////////////////////////////////////////////////////////////////////////////////
#ifndef __BUTTON_CFG_H_
#define __BUTTON_CFG_H_

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>

// Low level drivers
#include "drivers/peripheral/gpio/gpio/src/gpio.h"

// USER CODE BEGIN...

#include "config/proj_cfg.h"

// Debug communication port
#include "middleware/cli/cli/src/cli.h"

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

/**
 * 	List of Buttons
 *
 * @note 	User shall provide Button name here as it would be using
 * 			later inside code.
 *
 * 			Shall always start with 0.
 *
 * @note 	User shall change code only inside section of "USER_CODE_BEGIN"
 * 			ans "USER_CODE_END".
 */
typedef enum
{
	// USER CODE START...

    // End-Switches for position detection
    eBUTTON_BUCKET_HOME_SW = 0,     /**<Bucket at home position switch */
    eBUTTON_DELIVERY_OPEN_SW,       /**<Delivery door open switch */
    eBUTTON_DELIVERY_CLOSE_SW,      /**<Delivery door close switch */

    // Motor driver digital status line debouncing
    eBUTTON_DELIVERY_FAULT,         /**<Delivery power stage (MPS) fault */
    eBUTTON_SLIDER_FAULT,           /**<Bridge power stage (MPS) fault */

	// USER CODE END...

	eBUTTON_NUM_OF
} button_num_t;


// USER CODE BEGIN...

/**
 * 	Main button handler period
 * 	Unit: sec
 */
#define BUTTON_CFG_HNDL_PERIOD_S				( 0.01f )

/**
 * 	Enable/Disable usage of Filter module. It is being used for debouncing.
 */
#define BUTTON_CFG_FILTER_EN					( 1 )

/**
 * 	Enable/Disable debug mode
 *
 * 	@note Disabled in release!
 */
#define BUTTON_CFG_DEBUG_EN						( 0 )
#ifndef DEBUG
	#undef BUTTON_CFG_DEBUG_EN
	#define BUTTON_CFG_DEBUG_EN	( 0 )
#endif

/**
 * 	Enable/Disable assertions
 *
 * 	@note Disabled in release!
 */
#define BUTTON_CFG_ASSERT_EN					( 0 )
#ifndef DEBUG
	#undef BUTTON_CFG_ASSERT_EN
	#define BUTTON_CFG_ASSERT_EN	( 0 )
#endif

/**
 * 	Debug communication port macros
 */
#if ( 1 == BUTTON_CFG_DEBUG_EN )
	#define BUTTON_PRINT( ... )				( cli_printf( __VA_ARGS__ ))
#else
	#define BUTTON_PRINT( ... )				{ ; }

#endif

/**
 * 	 Assertion macros
 */
#if ( 1 == BUTTON_CFG_ASSERT_EN )
	#define BUTTON_ASSERT(x)					PROJ_CFG_ASSERT(x)
#else
	#define BUTTON_ASSERT(x)					{ ; }
#endif

// USER CODE END...

/**
 *  32-bit floating data type definition
 */
typedef float float32_t;

/**
 *     Button polarity
 */
typedef enum
{
    eBUTTON_POL_ACTIVE_HIGH = 0,    /**<Active high polarity */
    eBUTTON_POL_ACTIVE_LOW,         /**<Active low polatiry */
} button_polarity_t;

/**
 *     Button configuration
 */
typedef struct
{
    gpio_pin_t          gpio_pin;   /**<GPIO pin */
    button_polarity_t   polarity;   /**<Polarity */
    bool                lpf_en;     /**<Enable LPF */
    float32_t           lpf_fc;     /**<Low pass filter cutoff freq */
} button_cfg_t;


////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
const button_cfg_t * button_cfg_get_table(void);

#endif // __BUTTON_CFG_H_

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
